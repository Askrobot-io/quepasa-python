# coding: utf-8

"""
    QuePasa RAG SaaS API

    API for RAG retrieval, managing documents, files, and related operations including Telegram integration.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from quepasa.models.setup_telegram_request_commands import SetupTelegramRequestCommands
from typing import Optional, Set
from typing_extensions import Self

class SetupTelegramRequest(BaseModel):
    """
    SetupTelegramRequest
    """ # noqa: E501
    token: Optional[StrictStr] = Field(default=None, description="Telegram bot token.")
    commands: Optional[SetupTelegramRequestCommands] = None
    domain: Optional[StrictStr] = Field(default=None, description="(Optional) The name of a group of documents.")
    kind: Optional[StrictStr] = Field(default=None, description="(Experimental) Specifies the type of chunk. Can be \"text\" for raw text chunks, \"summary\" for chunks that are summaries of raw text, or \"all\" to include both types.")
    llm: Optional[StrictStr] = Field(default=None, description="(Optional) This is the model that will generate answers to questions based on the retrieved search results.")
    prompt: Optional[StrictStr] = Field(default=None, description="(Optional) The prompt used for RAG, with placeholders like {{LANGUAGE}} for the language in which the question was asked, and {{SOURCES}} for listing the relevant chunks.")
    user_names: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["token", "commands", "domain", "kind", "llm", "prompt", "user_names"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SetupTelegramRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of commands
        if self.commands:
            _dict['commands'] = self.commands.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SetupTelegramRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "token": obj.get("token"),
            "commands": SetupTelegramRequestCommands.from_dict(obj["commands"]) if obj.get("commands") is not None else None,
            "domain": obj.get("domain"),
            "kind": obj.get("kind"),
            "llm": obj.get("llm"),
            "prompt": obj.get("prompt"),
            "user_names": obj.get("user_names")
        })
        return _obj


