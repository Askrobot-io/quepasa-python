# coding: utf-8

"""
    QuePasa RAG SaaS API

    API for RAG retrieval, managing documents, files, and related operations including Telegram integration.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from quepasa.models.document_pages_inner import DocumentPagesInner
from typing import Optional, Set
from typing_extensions import Self

class Document(BaseModel):
    """
    Document
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier for the document.")
    url: StrictStr = Field(description="Original URL of the document.")
    text: Optional[StrictStr] = Field(default=None, description="Raw text content of the document.")
    html: Optional[StrictStr] = Field(default=None, description="Raw HTML content of the document.")
    markdown: Optional[StrictStr] = Field(default=None, description="Raw Markdown content of the document.")
    pages: Optional[List[DocumentPagesInner]] = None
    language: Optional[StrictStr] = Field(default=None, description="Two-character language code (e.g., 'en').")
    title: Optional[StrictStr] = Field(default=None, description="Optional title of the document.")
    keywords: Optional[StrictStr] = Field(default=None, description="Optional keywords for search optimization.")
    created_at: Optional[datetime] = Field(default=None, description="Creation date in ISO 8601 format.")
    updated_at: Optional[datetime] = Field(default=None, description="Update date in ISO 8601 format.")
    __properties: ClassVar[List[str]] = ["id", "url", "text", "html", "markdown", "pages", "language", "title", "keywords", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Document from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in pages (list)
        _items = []
        if self.pages:
            for _item_pages in self.pages:
                if _item_pages:
                    _items.append(_item_pages.to_dict())
            _dict['pages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Document from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "url": obj.get("url"),
            "text": obj.get("text"),
            "html": obj.get("html"),
            "markdown": obj.get("markdown"),
            "pages": [DocumentPagesInner.from_dict(_item) for _item in obj["pages"]] if obj.get("pages") is not None else None,
            "language": obj.get("language"),
            "title": obj.get("title"),
            "keywords": obj.get("keywords"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


